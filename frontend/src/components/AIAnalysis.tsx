import React, { useState, useEffect } from 'react';
import { Brain, Briefcase, Wrench, AlertTriangle, Target, Sparkles } from 'lucide-react';
import toast from 'react-hot-toast';
import { getAIAnalysis, checkAIAnalysisStatus } from '../services/api.ts';
import { AIAnalysisResponse } from '../types/index.ts';

interface AIAnalysisProps {
  sessionId: string;
  modelId: string | null;
}

const AIAnalysis: React.FC<AIAnalysisProps> = ({ sessionId, modelId }) => {
  const [aiAnalysis, setAiAnalysis] = useState<AIAnalysisResponse | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isAvailable, setIsAvailable] = useState(false);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    checkAvailability();
  }, []);

  useEffect(() => {
    if (isAvailable) {
      loadAIAnalysis();
    }
  }, [sessionId, modelId, isAvailable]);

  const checkAvailability = async () => {
    try {
      const status = await checkAIAnalysisStatus();
      setIsAvailable(status.ai_analysis_available);
      if (!status.ai_analysis_available) {
        setError(status.message);
        setIsLoading(false);
      }
    } catch (error: any) {
      setError('Failed to check AI analysis availability');
      setIsLoading(false);
    }
  };

  const loadAIAnalysis = async () => {
    try {
      setIsLoading(true);
      setError(null);
      const data = await getAIAnalysis(sessionId, modelId || undefined);
      setAiAnalysis(data);
    } catch (error: any) {
      const errorMessage = error.response?.data?.detail || 'Failed to load AI analysis';
      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center py-12">
        <div className="text-center">
          <div className="loading-spinner mx-auto mb-4"></div>
          <p className="text-gray-600">Generating AI-powered analysis...</p>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="card bg-red-50 border-red-200">
        <div className="flex items-center">
          <AlertTriangle className="h-5 w-5 text-red-400 mr-3" />
          <div>
            <h4 className="text-lg font-medium text-red-900 mb-1">AI Analysis Unavailable</h4>
            <p className="text-sm text-red-700">{error}</p>
          </div>
        </div>
      </div>
    );
  }

  if (!aiAnalysis) {
    return (
      <div className="text-center py-12">
        <p className="text-gray-600">Failed to load AI analysis</p>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div>
        <h3 className="text-lg font-semibold text-gray-900">AI-Powered Analysis</h3>
        <p className="text-gray-600">Advanced insights generated by Gemini LLM</p>
      </div>

      {/* AI Analysis */}
      <div className="card">
        <div className="flex items-center mb-4">
          <Brain className="h-5 w-5 text-purple-500 mr-2" />
          <h4 className="text-lg font-medium text-gray-900">AI Analysis</h4>
        </div>
        <div className="prose prose-sm max-w-none">
          <p className="text-gray-700 leading-relaxed whitespace-pre-wrap">{aiAnalysis.ai_analysis}</p>
        </div>
      </div>

      {/* Enhanced Insights */}
      {aiAnalysis.enhanced_insights.length > 0 && (
        <div className="card">
          <div className="flex items-center mb-4">
            <Sparkles className="h-5 w-5 text-yellow-500 mr-2" />
            <h4 className="text-lg font-medium text-gray-900">Enhanced Insights</h4>
          </div>
          <div className="space-y-3">
            {aiAnalysis.enhanced_insights.map((insight, index) => (
              <div key={index} className="flex items-start p-3 bg-yellow-50 rounded-lg">
                <Sparkles className="h-4 w-4 text-yellow-600 mr-3 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-yellow-800">{insight}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Business Recommendations */}
      {aiAnalysis.business_recommendations.length > 0 && (
        <div className="card">
          <div className="flex items-center mb-4">
            <Briefcase className="h-5 w-5 text-blue-500 mr-2" />
            <h4 className="text-lg font-medium text-gray-900">Business Recommendations</h4>
          </div>
          <div className="space-y-3">
            {aiAnalysis.business_recommendations.map((recommendation, index) => (
              <div key={index} className="flex items-start p-3 bg-blue-50 rounded-lg">
                <Briefcase className="h-4 w-4 text-blue-600 mr-3 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-blue-800">{recommendation}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Technical Recommendations */}
      {aiAnalysis.technical_recommendations.length > 0 && (
        <div className="card">
          <div className="flex items-center mb-4">
            <Wrench className="h-5 w-5 text-green-500 mr-2" />
            <h4 className="text-lg font-medium text-gray-900">Technical Recommendations</h4>
          </div>
          <div className="space-y-3">
            {aiAnalysis.technical_recommendations.map((recommendation, index) => (
              <div key={index} className="flex items-start p-3 bg-green-50 rounded-lg">
                <Wrench className="h-4 w-4 text-green-600 mr-3 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-green-800">{recommendation}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Risk Assessment */}
      {aiAnalysis.risk_assessment.length > 0 && (
        <div className="card">
          <div className="flex items-center mb-4">
            <AlertTriangle className="h-5 w-5 text-red-500 mr-2" />
            <h4 className="text-lg font-medium text-gray-900">Risk Assessment</h4>
          </div>
          <div className="space-y-3">
            {aiAnalysis.risk_assessment.map((risk, index) => (
              <div key={index} className="flex items-start p-3 bg-red-50 rounded-lg">
                <AlertTriangle className="h-4 w-4 text-red-600 mr-3 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-red-800">{risk}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* Opportunities */}
      {aiAnalysis.opportunities.length > 0 && (
        <div className="card">
          <div className="flex items-center mb-4">
            <Target className="h-5 w-5 text-indigo-500 mr-2" />
            <h4 className="text-lg font-medium text-gray-900">Opportunities</h4>
          </div>
          <div className="space-y-3">
            {aiAnalysis.opportunities.map((opportunity, index) => (
              <div key={index} className="flex items-start p-3 bg-indigo-50 rounded-lg">
                <Target className="h-4 w-4 text-indigo-600 mr-3 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-indigo-800">{opportunity}</p>
              </div>
            ))}
          </div>
        </div>
      )}

      {/* AI Analysis Info */}
      <div className="card bg-purple-50 border-purple-200">
        <div className="flex items-start">
          <Brain className="h-5 w-5 text-purple-600 mr-3 mt-0.5" />
          <div>
            <h4 className="text-lg font-medium text-purple-900 mb-2">About AI Analysis</h4>
            <div className="space-y-2 text-sm text-purple-700">
              <p>• This analysis was generated using Google's Gemini 2.0 Flash LLM</p>
              <p>• The AI considers your data profile, model performance, and statistical insights</p>
              <p>• Recommendations are tailored to your specific dataset and use case</p>
              <p>• Always validate AI insights with domain expertise and additional analysis</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AIAnalysis; 