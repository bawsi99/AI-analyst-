version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@postgres:5432/ai_analyst}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      
      # Supabase
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # JWT
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      
      # ML/AI
      - GEMINI_LLM_API_KEY=${GEMINI_LLM_API_KEY}
      - RANDOM_STATE=42
      - TEST_SIZE=0.2
      - MAX_FEATURES=100
      
      # AWS S3 (optional)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      
      # CORS
      - CORS_ORIGINS=${CORS_ORIGINS:-["http://localhost:3000","http://frontend:3000"]}
      
      # File upload
      - MAX_FILE_SIZE=52428800
      - UPLOAD_STORAGE_PATH=/app/uploads
      - MODEL_STORAGE_PATH=/app/models
    volumes:
      - model_storage:/app/models
      - upload_storage:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-analyst-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: ${FRONTEND_TARGET:-production}
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL:-http://localhost:8000/api/v1}
      - NODE_ENV=${NODE_ENV:-production}
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - ai-analyst-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-ai_analyst}
      - POSTGRES_USER=${POSTGRES_USER:-user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - ai-analyst-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-ai_analyst}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis for Celery and Caching
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - ai-analyst-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Celery Worker for Background Tasks
  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: celery
    command: celery -A app.celery worker --loglevel=info --concurrency=2
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@postgres:5432/ai_analyst}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      
      # Supabase
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # JWT
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      
      # ML/AI
      - GEMINI_LLM_API_KEY=${GEMINI_LLM_API_KEY}
      
      # AWS S3 (optional)
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_REGION=${AWS_REGION:-us-east-1}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
    volumes:
      - model_storage:/app/models
      - upload_storage:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-analyst-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "celery", "-A", "app.celery", "inspect", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  # Celery Beat for Scheduled Tasks (Optional)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: celery-beat
    command: celery -A app.celery beat --loglevel=info
    environment:
      # Database
      - DATABASE_URL=${DATABASE_URL:-postgresql://user:password@postgres:5432/ai_analyst}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
      
      # Supabase
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      
      # JWT
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      
      # ML/AI
      - GEMINI_LLM_API_KEY=${GEMINI_LLM_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-analyst-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Flower for Celery Monitoring (Optional)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: flower
    command: celery -A app.celery flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - REDIS_URL=${REDIS_URL:-redis://redis:6379/0}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai-analyst-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Nginx Reverse Proxy (Optional - for production)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    networks:
      - ai-analyst-network
    restart: unless-stopped
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  model_storage:
    driver: local
  upload_storage:
    driver: local

networks:
  ai-analyst-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16